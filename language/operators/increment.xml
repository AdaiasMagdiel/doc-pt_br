<?xml version="1.0" encoding="utf-8"?><!-- EN-Revision: 99ef98227f2d590d6124ebb4ebae0284a9d3e576 Maintainer: ae Status: ready -->
  <sect1 xml:id="language.operators.increment">
   <title>Operadores de Incremento/Decremento</title>
   <para>
    O PHP suporta operadores de pré e pós-incremento e decremento
    no estilo C.
   </para>
   <note>
    <simpara>
     Os operadores incremento/decremento afetam apenas números e strings.
     Arrays, objetos, booleanos e recursos não são afetados.
     Decrementar &null; não gera efeitos, mas incrementar resulta
     em <literal>1</literal>.
    </simpara>
   </note>
   <table>
    <title>Operadores de Incremento/Decremento</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Exemplo</entry>
       <entry>Nome</entry>
       <entry>Efeito</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>++$a</entry>
       <entry>Pré-incremento</entry>
       <entry>Incrementa <varname>$a</varname> em um, e então retorna <varname>$a</varname>.</entry>
      </row>
      <row>
       <entry>$a++</entry>
       <entry>Pós-incremento</entry>
       <entry>Retorna <varname>$a</varname>, e então incrementa <varname>$a</varname> em um.</entry>
      </row>
      <row>
       <entry>--$a</entry>
       <entry>Pré-decremento</entry>
       <entry>Diminuiu <varname>$a</varname> em um, e então retorna <varname>$a</varname>.</entry>
      </row>
      <row>
       <entry>$a--</entry>
       <entry>Pós-decremento</entry>
       <entry>Retorna <varname>$a</varname>, e então diminuir <varname>$a</varname> em um.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Aqui está um script de exemplo simples:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Pós-incremento</h3>";
$a = 5;
echo "Deve ser 5: " . $a++ . "<br />\n";
echo "Deve ser 6: " . $a . "<br />\n";

echo "<h3>Pré-incremento</h3>";
$a = 5;
echo "Deve ser 6: " . ++$a . "<br />\n";
echo "Deve ser 6: " . $a . "<br />\n";

echo "<h3>Pós-decremento</h3>";
$a = 5;
echo "Deve ser 5: " . $a-- . "<br />\n";
echo "Deve ser 4: " . $a . "<br />\n";

echo "<h3>Pré-decremento</h3>";
$a = 5;
echo "Deve ser 4: " . --$a . "<br />\n";
echo "Deve ser 4: " . $a . "<br />\n";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    O PHP segue a convenção Perl quando tratando operações aritmétricas
    em variavéis caracter em vez da convenção C. Por exemplo, em Perl
    <literal>$a = 'Z'; $a++;</literal> transforma <literal>$a</literal> em <literal>'AA'</literal> enquanto que em C
    <literal>a = 'Z'; a++;</literal> transforma <literal>a</literal> em <literal>'['</literal>
    (valor ASCII de <literal>'Z'</literal> é 90, valor ASCII <literal>'['</literal> é 91).
    Note que variáveis caracter podem ser incrementadas mas não decrementadas e
    somente letras e dígitos simples ASCII (a-z, A-Z and 0-9) são suportados.
    Incrementar ou decrementar outros caracteres não tem efeitos, a
    string original não sendo modificada.
    <example>
     <title>Operações aritmétricas em variáveis caractere</title>
     <programlisting role="php">
<![CDATA[
<?php
echo '== Alphabetic strings ==' . PHP_EOL;
$s = 'W';
for ($n=0; $n<6; $n++) {
    echo ++$s . PHP_EOL;
}
// Alphanumeric strings behave differently
echo '== Alphanumeric strings ==' . PHP_EOL;
$d = 'A8';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
$d = 'A08';
for ($n=0; $n<6; $n++) {
    echo ++$d . PHP_EOL;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
== Alphabetic strings ==
X
Y
Z
AA
AB
AC
== Alphanumeric strings ==
A9
B0
B1
B2
B3
B4
A09
A10
A11
A12
A13
A14
]]>
     </screen>
    </example>
   </para>
   <para>
    Incrementar ou decrementar booleanos não há efeito.
   </para>
  </sect1>

