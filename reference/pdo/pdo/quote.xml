<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 661e6858acade9f5a08fc8f9c07b605f42f4a700 Maintainer: leonardolara Status: ready -->
<refentry xml:id="pdo.quote" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::quote</refname>
  <refpurpose>
   Inclui aspas em uma string para uso em uma consulta
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDO">
   <modifier>public</modifier> <type class="union"><type>string</type><type>false</type></type><methodname>PDO::quote</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
  </methodsynopsis>

  <para>
   <methodname>PDO::quote</methodname> coloca aspas na string de entrada (se
   necessário) e escapa caracteres especiais dentro da string de entrada, usando um
   estilo de aspas (ex.: simples ou duplas) apropriado ao driver subjacente.
  </para>
  <para>
   Se esta função estiver sendo usada para construir instruções SQL, é
   <emphasis>fortemente</emphasis> recomendado usar
   <methodname>PDO::prepare</methodname> para preparar instruções SQL com parâmetros
   vinculados em vez de usar <methodname>PDO::quote</methodname> para interpolar
   a entrada do usuário em uma instrução SQL. Instruções preparadas com parâmetros vinculados
   não são apenas mais portáveis, mais convenientes e imunes à injeção de SQL, mas
   geralmente são muito mais rápidas de executar do que consultas interpoladas, já que tanto
   o servidor quanto o cliente podem armazenar em cache uma forma compilada da consulta.
  </para>
  <para>
   Nem todos os drivers PDO implementam esse método (principalmente PDO_ODBC). Considere
   usar instruções preparadas.
  </para>
  <caution>
   <title>Segurança: o conjunto de caracteres padrão</title>
   <para>
    O conjunto de caracteres deve ser definido no nível do servidor ou na
    própria conexão do banco de dados (dependendo do driver) para afetar o
    <methodname>PDO::quote</methodname>. Consulte a <link linkend="pdo.drivers">documentação
    específica do driver</link> para obter mais informações.
   </para>
  </caution>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
      <listitem>
       <para>
        A string que será envolvida por aspas.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        Fornece uma dica sobre o tipo de dados para drivers que possuem estilos de cotação
        alternativos. Por exemplo, <constant>PDO_PARAM_LOB</constant> dirá ao driver para
        escapar dados binários.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna uma string entre aspas que é teoricamente segura para passar em
   uma instrução SQL. Retorna &false; se o driver não suportar inserção de aspas
   dessa forma.
  </para>
 </refsect1>

 <!-- Use when ERRORS exist
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function throw E_* level errors, or exceptions?
  </para>
 </refsect1>
 -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Inserindo aspas em uma string normal</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* String simples */
$string = 'Teste';
print "String sem aspas: $string\n";
print "String com aspas: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
String sem aspas: Teste
String com aspas: 'Teste'
]]>
    </screen>
   </example>
   <example>
    <title>Inserindo aspas em uma string perigosa</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* String perigosa */
$string = 'String \' perversa';
print "String sem aspas: $string\n";
print "String com aspas:" . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
String sem aspas: String ' perversa
String com aspas: 'String '' perversa'
]]>
    </screen>
   </example>
   <example>
    <title>Inserindo aspas em uma string complexa</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* String complexa */
$string = "St'ri''ng \"com'\"plexa";
print "String sem aspas: $string\n";
print "String com aspas: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
String sem aspas: St'ri''ng "com'"plexa
String com aspas: 'St''ri''''ng "com''"plexa'
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
